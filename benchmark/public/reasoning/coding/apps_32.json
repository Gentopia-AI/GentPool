{
    "problem": "Alyona's mother wants to present an array of n non-negative integers to Alyona. The array should be special. \n\nAlyona is a capricious girl so after she gets the array, she inspects m of its subarrays. Subarray is a set of some subsequent elements of the array. The i-th subarray is described with two integers l_{i} and r_{i}, and its elements are a[l_{i}], a[l_{i} + 1], ..., a[r_{i}].\n\nAlyona is going to find mex for each of the chosen subarrays. Among these m mexes the girl is going to find the smallest. She wants this minimum mex to be as large as possible. \n\nYou are to find an array a of n elements so that the minimum mex among those chosen by Alyona subarrays is as large as possible.\n\nThe mex of a set S is a minimum possible non-negative integer that is not in S.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 10^5).\n\nThe next m lines contain information about the subarrays chosen by Alyona. The i-th of these lines contains two integers l_{i} and r_{i} (1 ≤ l_{i} ≤ r_{i} ≤ n), that describe the subarray a[l_{i}], a[l_{i} + 1], ..., a[r_{i}].\n\n\n-----Output-----\n\nIn the first line print single integer — the maximum possible minimum mex.\n\nIn the second line print n integers — the array a. All the elements in a should be between 0 and 10^9.\n\nIt is guaranteed that there is an optimal answer in which all the elements in a are between 0 and 10^9.\n\nIf there are multiple solutions, print any of them.\n\n\n-----Examples-----\nInput\n5 3\n1 3\n2 5\n4 5\n\nOutput\n2\n1 0 2 1 0\n\nInput\n4 2\n1 4\n2 4\n\nOutput\n3\n5 2 0 1\n\n\n-----Note-----\n\nThe first example: the mex of the subarray (1, 3) is equal to 3, the mex of the subarray (2, 5) is equal to 3, the mex of the subarray (4, 5) is equal to 2 as well, thus the minumal mex among the subarrays chosen by Alyona is equal to 2.",
    "test_case": "{\n  \"inputs\": [\n    \"5 3\\n1 3\\n2 5\\n4 5\\n\",\n    \"4 2\\n1 4\\n2 4\\n\",\n    \"1 1\\n1 1\\n\",\n    \"2 1\\n2 2\\n\",\n    \"5 6\\n2 4\\n2 3\\n1 4\\n3 4\\n2 5\\n1 3\\n\",\n    \"8 3\\n2 3\\n2 8\\n3 6\\n\",\n    \"10 10\\n1 9\\n4 8\\n4 8\\n5 9\\n1 9\\n3 8\\n1 6\\n1 9\\n1 6\\n6 9\\n\",\n    \"3 6\\n1 3\\n1 3\\n1 1\\n1 1\\n3 3\\n3 3\\n\",\n    \"3 3\\n1 3\\n2 2\\n1 3\\n\",\n    \"6 8\\n3 5\\n3 6\\n4 6\\n2 5\\n2 5\\n1 3\\n3 6\\n3 5\\n\",\n    \"10 4\\n4 10\\n4 6\\n6 8\\n1 10\\n\",\n    \"9 1\\n1 1\\n\",\n    \"3 8\\n2 3\\n1 3\\n1 2\\n2 3\\n1 3\\n2 2\\n1 2\\n1 2\\n\",\n    \"3 8\\n1 2\\n1 2\\n1 1\\n2 3\\n2 3\\n1 1\\n1 3\\n1 3\\n\",\n    \"7 3\\n7 7\\n3 7\\n5 7\\n\",\n    \"9 9\\n4 5\\n5 8\\n1 8\\n4 8\\n3 4\\n7 8\\n1 4\\n7 8\\n6 7\\n\",\n    \"10 10\\n1 5\\n7 10\\n2 10\\n2 5\\n2 9\\n5 9\\n3 10\\n4 9\\n6 9\\n2 7\\n\",\n    \"8 7\\n5 8\\n3 7\\n1 8\\n3 4\\n2 8\\n2 7\\n4 6\\n\",\n    \"10 3\\n2 4\\n8 10\\n4 6\\n\",\n    \"5 8\\n3 4\\n1 5\\n3 4\\n3 5\\n3 4\\n1 4\\n1 5\\n2 5\\n\",\n    \"9 4\\n5 9\\n3 8\\n2 8\\n1 4\\n\",\n    \"7 7\\n2 4\\n1 4\\n3 6\\n2 6\\n5 7\\n3 6\\n1 4\\n\",\n    \"6 2\\n4 6\\n2 5\\n\",\n    \"7 9\\n6 7\\n1 2\\n2 5\\n4 7\\n1 7\\n5 6\\n2 3\\n6 7\\n1 2\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n0 1 0 1 0\\n\",\n    \"3\\n0 1 2 0\\n\",\n    \"1\\n0\\n\",\n    \"1\\n0 0\\n\",\n    \"2\\n0 1 0 1 0\\n\",\n    \"2\\n0 1 0 1 0 1 0 1\\n\",\n    \"4\\n0 1 2 3 0 1 2 3 0 1\\n\",\n    \"1\\n0 0 0\\n\",\n    \"1\\n0 0 0\\n\",\n    \"3\\n0 1 2 0 1 2\\n\",\n    \"3\\n0 1 2 0 1 2 0 1 2 0\\n\",\n    \"1\\n0 0 0 0 0 0 0 0 0\\n\",\n    \"1\\n0 0 0\\n\",\n    \"1\\n0 0 0\\n\",\n    \"1\\n0 0 0 0 0 0 0\\n\",\n    \"2\\n0 1 0 1 0 1 0 1 0\\n\",\n    \"4\\n0 1 2 3 0 1 2 3 0 1\\n\",\n    \"2\\n0 1 0 1 0 1 0 1\\n\",\n    \"3\\n0 1 2 0 1 2 0 1 2 0\\n\",\n    \"2\\n0 1 0 1 0\\n\",\n    \"4\\n0 1 2 3 0 1 2 3 0\\n\",\n    \"3\\n0 1 2 0 1 2 0\\n\",\n    \"3\\n0 1 2 0 1 2\\n\",\n    \"2\\n0 1 0 1 0 1 0\\n\"\n  ]\n}",
    "dataset": "apps",
    "tags": [
        "reasoning/coding"
    ]
}