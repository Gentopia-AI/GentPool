{
    "problem": "Mirko is a huge fan of chess and programming, but typical chess soon became boring for him, so he started having fun with rook pieces.\n\nHe found a chessboard with $N$ rows and $N$ columns and placed $K$ rooks on it. Mirko’s game is made of the following rules:\n - Each rook’s power is determined by an integer.\n - A rook sees all the fields that are in his row or column except its own field.\n - We say that a field is attacked if the binary XOR of all the powers of the rooks that see the field is greater than $0$.\n\nNotice that the field a rook is at can be attacked or not.\n\nInitially, Mirko placed the rooks in a certain layout on the board and will make $P$ moves. After each move, determine how many fields are attacked. Every rook can be moved to any free field on the whole board (not only across column and row).\n\n-----Input-----\nThe first line of input contains integers $N$, $K$, $P$ ($1 \\leq N \\leq 1\\ 000\\ 000\\ 000$, $1 \\leq K \\leq 100\\ 000$, $1 \\leq P \\leq 100\\ 000$). Each of the following $K$ lines contains three integers $R$, $C$, $X$ ($1 \\leq R, C \\leq N$, $1 \\leq X \\leq 1\\ 000\\ 000\\ 000$) which denote that initially there is a rook of power $X$ on the field $(R, C)$. Each of the following $P$ lines contains four integers $R_1$, $C_1$, $R_2$, $C_2$ ($1 \\leq R_1, C_1, R_2, C_2 \\leq N$) which denote that the rook has moved from field $(R_1, C_1 )$ to field $(R_2, C_2 )$. It is guaranteed that there will not be two rooks on one field at any point.\n\n-----Output-----\nThe output must consist of $P$ lines, the $k$-th line containing the total number of attacked fields after $k$ moves.\n\n-----Examples-----\nSample Input 1:\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\nSample Output 1:\n4\n0\n\nSample Input 2:\n2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\nSample Output 2:\n4\n2",
    "test_case": "{\n    \"inputs\": [\n        \"2 2 2\\n1 1 1\\n2 2 1\\n2 2 2 1\\n1 1 1 2\\n\",\n        \"2 2 2\\n1 1 1\\n2 2 2\\n2 2 2 1\\n1 1 1 2\\n\",\n        \"3 3 4\\n1 1 1\\n2 2 2\\n2 3 3\\n2 3 3 3\\n3 3 3 1\\n1 1 1 2\\n3 1 3 2\\n\"\n    ],\n    \"outputs\": [\n        \"4\\n0\\n\",\n        \"4\\n2\\n\",\n        \"6\\n7\\n7\\n9\\n\"\n    ]\n}",
    "dataset": "apps",
    "tags": [
        "reasoning/coding"
    ]
}