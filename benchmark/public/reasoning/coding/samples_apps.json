[
    {
        "problem": "Arseny likes to organize parties and invite people to it. However, not only friends come to his parties, but friends of his friends, friends of friends of his friends and so on. That's why some of Arseny's guests can be unknown to him. He decided to fix this issue using the following procedure.\n\nAt each step he selects one of his guests A, who pairwise introduces all of his friends to each other. After this action any two friends of A become friends. This process is run until all pairs of guests are friends.\n\nArseny doesn't want to spend much time doing it, so he wants to finish this process using the minimum number of steps. Help Arseny to do it.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 ≤ n ≤ 22; $0 \\leq m \\leq \\frac{n \\cdot(n - 1)}{2}$) — the number of guests at the party (including Arseny) and the number of pairs of people which are friends.\n\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v), which means that people with numbers u and v are friends initially. It's guaranteed that each pair of friends is described not more than once and the graph of friendship is connected.\n\n\n-----Output-----\n\nIn the first line print the minimum number of steps required to make all pairs of guests friends.\n\nIn the second line print the ids of guests, who are selected at each step.\n\nIf there are multiple solutions, you can output any of them.\n\n\n-----Examples-----\nInput\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n\nOutput\n2\n2 3 \nInput\n4 4\n1 2\n1 3\n1 4\n3 4\n\nOutput\n1\n1 \n\n\n-----Note-----\n\nIn the first test case there is no guest who is friend of all other guests, so at least two steps are required to perform the task. After second guest pairwise introduces all his friends, only pairs of guests (4, 1) and (4, 2) are not friends. Guest 3 or 5 can introduce them.\n\nIn the second test case guest number 1 is a friend of all guests, so he can pairwise introduce all guests in one step.",
        "test_case": "{\n  \"inputs\": [\n    \"5 6\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5\\n\",\n    \"4 4\\n1 2\\n1 3\\n1 4\\n3 4\\n\",\n    \"1 0\\n\",\n    \"2 1\\n2 1\\n\",\n    \"3 2\\n1 3\\n2 3\\n\",\n    \"22 31\\n5 11\\n6 3\\n10 1\\n18 20\\n3 21\\n12 10\\n15 19\\n1 17\\n17 18\\n2 21\\n21 7\\n2 15\\n3 2\\n19 6\\n2 19\\n13 16\\n21 19\\n13 5\\n19 3\\n12 22\\n9 20\\n14 11\\n15 21\\n7 8\\n2 6\\n15 6\\n6 21\\n15 3\\n4 22\\n14 8\\n16 9\\n\",\n    \"22 36\\n6 15\\n6 9\\n14 18\\n8 6\\n5 18\\n3 12\\n16 22\\n11 2\\n7 1\\n17 3\\n10 20\\n8 11\\n5 21\\n4 11\\n9 11\\n20 1\\n12 4\\n8 19\\n8 9\\n15 2\\n6 19\\n13 17\\n8 2\\n11 15\\n9 15\\n15 19\\n16 13\\n15 8\\n19 11\\n6 2\\n9 19\\n6 11\\n9 2\\n19 2\\n10 14\\n22 21\\n\",\n    \"22 22\\n19 20\\n11 21\\n7 4\\n14 3\\n22 8\\n13 6\\n8 6\\n16 13\\n18 14\\n17 9\\n19 4\\n21 1\\n16 3\\n12 20\\n11 18\\n5 15\\n10 15\\n1 10\\n5 17\\n22 2\\n7 2\\n9 12\\n\",\n    \"22 21\\n10 15\\n22 8\\n21 1\\n16 13\\n16 3\\n7 2\\n5 15\\n1 10\\n17 9\\n11 18\\n7 4\\n18 14\\n5 17\\n14 3\\n19 20\\n8 6\\n12 20\\n11 21\\n19 4\\n13 6\\n22 2\\n\",\n    \"22 21\\n14 2\\n7 8\\n17 6\\n11 20\\n5 16\\n1 2\\n22 8\\n4 3\\n13 18\\n3 2\\n6 1\\n21 3\\n11 4\\n6 9\\n3 12\\n4 5\\n15 2\\n14 19\\n11 13\\n5 7\\n1 10\\n\",\n    \"22 21\\n7 8\\n10 14\\n21 2\\n5 18\\n22 8\\n2 4\\n2 3\\n3 13\\n11 10\\n19 2\\n17 20\\n10 5\\n15 11\\n7 4\\n17 13\\n5 1\\n6 4\\n16 14\\n9 2\\n2 1\\n10 12\\n\",\n    \"22 66\\n15 20\\n15 4\\n2 22\\n8 22\\n2 4\\n8 2\\n5 7\\n18 8\\n10 21\\n22 20\\n18 7\\n2 20\\n5 1\\n20 19\\n21 4\\n8 4\\n20 5\\n7 8\\n7 4\\n21 15\\n21 22\\n7 20\\n5 22\\n21 7\\n5 18\\n18 21\\n19 7\\n15 7\\n21 8\\n18 15\\n18 16\\n21 19\\n19 5\\n21 2\\n5 15\\n8 3\\n7 22\\n2 15\\n9 2\\n20 4\\n15 22\\n19 18\\n19 15\\n15 13\\n7 2\\n15 8\\n21 5\\n18 2\\n5 8\\n19 2\\n5 4\\n19 8\\n12 7\\n8 20\\n4 11\\n20 18\\n5 2\\n21 20\\n19 17\\n4 18\\n22 19\\n22 14\\n4 22\\n20 6\\n18 22\\n19 4\\n\",\n    \"22 66\\n12 18\\n4 12\\n15 21\\n12 1\\n1 18\\n2 5\\n9 10\\n20 15\\n18 10\\n2 1\\n1 14\\n20 5\\n12 9\\n5 12\\n14 9\\n1 5\\n2 20\\n15 2\\n5 14\\n15 1\\n17 2\\n17 9\\n20 18\\n3 9\\n2 9\\n15 5\\n14 17\\n14 16\\n12 14\\n2 14\\n12 10\\n7 2\\n20 22\\n5 10\\n17 19\\n14 15\\n15 9\\n20 1\\n15 17\\n20 10\\n20 9\\n2 10\\n11 10\\n17 10\\n12 20\\n5 13\\n17 1\\n15 10\\n1 8\\n18 15\\n5 17\\n12 15\\n14 20\\n12 2\\n17 12\\n17 20\\n14 10\\n18 2\\n9 18\\n18 14\\n18 6\\n18 17\\n9 5\\n18 5\\n1 9\\n10 1\\n\",\n    \"22 66\\n20 9\\n3 10\\n2 14\\n19 14\\n16 20\\n14 18\\n15 10\\n21 2\\n7 14\\n10 2\\n14 11\\n3 2\\n15 20\\n20 18\\n3 14\\n9 7\\n18 2\\n3 9\\n14 10\\n7 11\\n20 14\\n14 15\\n2 7\\n14 9\\n21 1\\n18 12\\n21 15\\n10 18\\n18 11\\n21 7\\n3 21\\n18 15\\n10 20\\n2 8\\n15 7\\n9 10\\n4 11\\n3 7\\n10 17\\n9 18\\n20 3\\n18 21\\n10 7\\n9 11\\n10 11\\n3 15\\n10 21\\n6 3\\n20 2\\n3 11\\n7 18\\n21 14\\n21 9\\n11 20\\n15 13\\n21 20\\n2 15\\n11 15\\n7 5\\n9 22\\n9 15\\n3 18\\n9 2\\n21 11\\n20 7\\n11 2\\n\",\n    \"22 66\\n17 7\\n2 11\\n19 17\\n14 17\\n7 14\\n9 1\\n12 19\\n7 9\\n14 18\\n15 20\\n7 12\\n14 21\\n6 15\\n4 2\\n6 22\\n7 19\\n12 9\\n14 19\\n10 18\\n9 2\\n14 12\\n18 2\\n15 14\\n7 2\\n17 13\\n6 18\\n14 2\\n4 7\\n9 19\\n3 12\\n17 12\\n2 12\\n18 7\\n17 15\\n4 6\\n17 4\\n4 8\\n4 19\\n7 5\\n15 9\\n7 15\\n18 4\\n14 4\\n4 12\\n4 9\\n2 19\\n14 6\\n16 19\\n9 14\\n18 9\\n19 15\\n15 12\\n4 15\\n2 15\\n7 6\\n9 6\\n15 18\\n19 6\\n17 6\\n17 18\\n6 12\\n18 19\\n17 9\\n12 18\\n6 2\\n2 17\\n\",\n    \"22 66\\n10 19\\n15 6\\n2 10\\n9 19\\n6 5\\n14 10\\n15 19\\n3 14\\n10 9\\n11 2\\n6 8\\n18 8\\n18 7\\n19 14\\n18 5\\n1 15\\n18 2\\n21 8\\n10 18\\n9 18\\n19 5\\n19 18\\n9 15\\n6 16\\n5 12\\n21 5\\n21 2\\n6 19\\n14 6\\n10 13\\n14 9\\n2 14\\n6 9\\n10 15\\n8 5\\n9 2\\n18 21\\n15 2\\n21 10\\n8 2\\n9 8\\n6 21\\n6 10\\n5 2\\n8 19\\n18 15\\n5 9\\n14 21\\n14 18\\n19 21\\n8 14\\n15 21\\n14 15\\n8 10\\n6 2\\n14 5\\n5 15\\n20 8\\n10 5\\n15 8\\n19 2\\n22 21\\n4 9\\n9 21\\n19 17\\n18 6\\n\",\n    \"22 66\\n9 22\\n9 7\\n18 3\\n4 1\\n4 8\\n22 7\\n4 7\\n16 8\\n22 12\\n17 3\\n20 17\\n9 1\\n16 20\\n4 3\\n12 7\\n22 16\\n16 17\\n3 7\\n22 13\\n1 8\\n8 22\\n9 16\\n9 4\\n8 17\\n8 20\\n7 17\\n8 15\\n20 7\\n16 3\\n8 7\\n9 17\\n7 16\\n8 12\\n16 4\\n2 4\\n16 1\\n3 22\\n1 12\\n20 4\\n22 1\\n20 9\\n17 12\\n12 9\\n14 20\\n20 1\\n4 22\\n12 20\\n11 17\\n5 9\\n20 22\\n12 19\\n10 1\\n17 22\\n20 3\\n7 6\\n12 3\\n21 16\\n8 9\\n17 1\\n17 4\\n7 1\\n3 1\\n16 12\\n9 3\\n3 8\\n12 4\\n\",\n    \"22 66\\n16 14\\n10 22\\n13 15\\n3 18\\n18 15\\n21 13\\n7 2\\n21 22\\n4 14\\n15 4\\n16 3\\n3 10\\n4 20\\n4 16\\n19 14\\n18 14\\n10 14\\n16 7\\n21 15\\n13 3\\n10 15\\n22 7\\n3 15\\n18 11\\n13 10\\n22 4\\n13 12\\n1 10\\n3 17\\n4 21\\n13 22\\n4 13\\n22 14\\n18 21\\n13 16\\n3 22\\n22 18\\n13 18\\n7 10\\n14 3\\n10 21\\n22 9\\n21 16\\n21 7\\n3 4\\n22 16\\n16 10\\n18 10\\n6 21\\n8 16\\n22 15\\n21 14\\n7 13\\n7 3\\n18 7\\n4 10\\n7 4\\n14 7\\n4 18\\n16 15\\n14 15\\n18 16\\n15 5\\n13 14\\n21 3\\n15 7\\n\",\n    \"22 66\\n9 20\\n16 1\\n1 12\\n20 17\\n14 17\\n1 3\\n13 20\\n1 17\\n17 8\\n3 12\\n15 20\\n6 1\\n13 9\\n20 3\\n9 21\\n3 11\\n15 19\\n22 13\\n13 12\\n21 10\\n17 21\\n8 13\\n3 9\\n16 12\\n5 20\\n20 21\\n16 21\\n15 1\\n15 3\\n1 21\\n8 2\\n16 20\\n20 8\\n12 9\\n21 15\\n7 9\\n8 15\\n8 1\\n12 21\\n17 16\\n15 9\\n17 9\\n3 17\\n1 9\\n13 3\\n15 13\\n15 17\\n3 8\\n21 13\\n8 9\\n15 12\\n21 3\\n16 18\\n16 13\\n1 20\\n12 20\\n16 8\\n8 21\\n17 13\\n4 12\\n8 12\\n15 16\\n12 17\\n13 1\\n9 16\\n3 16\\n\",\n    \"22 66\\n9 13\\n7 8\\n7 22\\n1 12\\n10 13\\n18 9\\n14 13\\n18 17\\n12 18\\n19 7\\n1 10\\n17 16\\n15 9\\n7 10\\n19 17\\n8 9\\n17 14\\n6 14\\n19 10\\n9 7\\n18 19\\n10 17\\n17 7\\n14 9\\n1 19\\n10 9\\n9 17\\n10 12\\n13 21\\n8 18\\n10 14\\n13 19\\n4 8\\n8 12\\n19 3\\n14 8\\n12 13\\n19 8\\n18 13\\n7 18\\n7 1\\n12 7\\n12 19\\n18 20\\n11 1\\n13 8\\n13 17\\n1 8\\n17 12\\n19 14\\n13 7\\n5 12\\n1 17\\n12 14\\n14 18\\n8 17\\n8 10\\n18 1\\n9 19\\n14 1\\n13 1\\n1 9\\n7 14\\n9 12\\n18 10\\n10 2\\n\",\n    \"22 66\\n11 19\\n11 22\\n2 22\\n6 21\\n6 1\\n22 5\\n13 2\\n13 19\\n13 22\\n6 10\\n1 21\\n19 17\\n6 17\\n16 21\\n22 19\\n19 16\\n17 13\\n21 19\\n16 11\\n15 16\\n1 11\\n21 10\\n12 11\\n22 6\\n1 22\\n13 11\\n10 16\\n11 10\\n19 1\\n10 19\\n10 2\\n6 16\\n13 21\\n17 11\\n7 1\\n21 2\\n22 16\\n21 8\\n17 10\\n21 11\\n1 2\\n10 1\\n10 22\\n19 20\\n17 18\\n1 17\\n13 10\\n16 13\\n2 11\\n22 17\\n1 16\\n2 14\\n10 9\\n16 2\\n21 17\\n4 6\\n19 6\\n22 21\\n17 2\\n13 6\\n6 11\\n6 2\\n13 1\\n3 13\\n17 16\\n2 19\\n\",\n    \"22 66\\n22 7\\n22 3\\n16 6\\n16 1\\n8 17\\n15 18\\n13 18\\n8 1\\n12 15\\n12 5\\n16 7\\n8 6\\n22 12\\n5 17\\n10 7\\n15 6\\n6 18\\n17 19\\n18 16\\n16 5\\n22 17\\n15 17\\n22 16\\n6 7\\n1 11\\n16 12\\n8 12\\n7 12\\n17 6\\n17 1\\n6 5\\n7 17\\n1 5\\n15 5\\n17 18\\n15 7\\n15 22\\n12 4\\n16 15\\n6 21\\n7 18\\n8 15\\n12 1\\n15 1\\n16 8\\n1 6\\n7 5\\n1 18\\n8 18\\n15 2\\n7 8\\n22 5\\n22 18\\n1 7\\n16 20\\n18 5\\n5 8\\n14 8\\n17 12\\n18 12\\n9 5\\n1 22\\n6 22\\n6 12\\n16 17\\n22 8\\n\",\n    \"22 66\\n1 13\\n12 21\\n15 21\\n5 15\\n16 12\\n8 13\\n3 20\\n13 9\\n15 2\\n2 5\\n3 17\\n1 2\\n11 20\\n11 2\\n3 12\\n15 12\\n2 3\\n20 13\\n18 21\\n20 2\\n15 3\\n3 21\\n20 22\\n9 20\\n20 12\\n12 5\\n9 11\\n21 2\\n20 5\\n15 9\\n13 11\\n20 21\\n12 11\\n13 15\\n15 20\\n5 19\\n13 5\\n11 7\\n3 11\\n21 11\\n12 13\\n10 9\\n21 13\\n1 15\\n13 3\\n1 3\\n12 1\\n5 1\\n1 20\\n21 9\\n21 1\\n12 9\\n21 5\\n11 15\\n3 5\\n2 9\\n3 9\\n5 11\\n11 1\\n14 15\\n2 4\\n5 9\\n6 1\\n2 12\\n9 1\\n2 13\\n\",\n    \"22 66\\n15 9\\n22 8\\n12 22\\n12 15\\n14 11\\n11 17\\n5 15\\n14 10\\n12 17\\n14 18\\n18 12\\n14 22\\n19 8\\n12 11\\n12 21\\n22 13\\n15 11\\n6 17\\n18 15\\n22 19\\n8 4\\n2 13\\n19 12\\n19 14\\n18 17\\n22 1\\n11 19\\n15 22\\n19 17\\n5 12\\n11 5\\n8 18\\n15 19\\n8 15\\n13 18\\n14 13\\n5 14\\n5 17\\n13 17\\n13 19\\n17 15\\n18 22\\n13 15\\n11 13\\n12 13\\n8 5\\n19 18\\n8 12\\n11 18\\n18 5\\n14 17\\n5 19\\n14 12\\n13 8\\n17 22\\n11 22\\n8 14\\n16 5\\n3 19\\n15 14\\n17 8\\n18 20\\n5 13\\n11 8\\n11 7\\n22 5\\n\",\n    \"22 38\\n19 21\\n19 6\\n1 7\\n8 17\\n5 1\\n14 13\\n15 4\\n20 3\\n19 8\\n22 6\\n11 16\\n9 15\\n22 20\\n21 15\\n12 13\\n18 7\\n19 5\\n1 22\\n3 8\\n19 1\\n22 13\\n19 17\\n4 2\\n5 3\\n21 7\\n12 10\\n7 15\\n20 21\\n18 17\\n10 5\\n8 9\\n13 20\\n18 9\\n18 22\\n15 1\\n5 15\\n2 8\\n11 21\\n\",\n    \"22 45\\n4 1\\n8 6\\n12 13\\n15 22\\n20 8\\n16 4\\n3 20\\n13 9\\n6 5\\n18 20\\n16 22\\n14 3\\n1 14\\n7 17\\n7 3\\n17 6\\n11 19\\n19 22\\n5 11\\n13 11\\n17 11\\n8 15\\n10 17\\n6 2\\n2 22\\n18 13\\n18 9\\n16 11\\n10 7\\n2 18\\n22 4\\n1 16\\n9 3\\n9 8\\n9 11\\n3 15\\n14 4\\n13 16\\n7 15\\n6 3\\n4 20\\n2 19\\n10 1\\n16 9\\n21 14\\n\",\n    \"22 60\\n14 6\\n16 12\\n6 21\\n11 16\\n2 17\\n4 8\\n18 11\\n3 5\\n13 3\\n18 9\\n8 19\\n3 16\\n19 13\\n22 13\\n10 15\\n3 1\\n15 4\\n5 18\\n8 17\\n2 20\\n15 19\\n15 12\\n14 2\\n7 18\\n5 19\\n10 5\\n22 8\\n9 8\\n14 7\\n1 4\\n12 6\\n9 14\\n4 11\\n11 2\\n16 1\\n5 12\\n13 4\\n22 9\\n22 15\\n22 10\\n11 19\\n10 2\\n11 5\\n2 9\\n5 4\\n9 3\\n21 22\\n10 19\\n16 8\\n13 17\\n8 7\\n18 20\\n10 12\\n12 3\\n4 10\\n14 13\\n3 6\\n12 2\\n1 8\\n15 5\\n\",\n    \"22 80\\n8 22\\n5 18\\n17 18\\n10 22\\n9 15\\n12 10\\n4 21\\n2 12\\n21 16\\n21 7\\n13 6\\n5 21\\n20 1\\n11 4\\n19 16\\n18 16\\n17 5\\n22 20\\n18 4\\n6 14\\n3 4\\n16 11\\n1 12\\n16 20\\n19 4\\n17 8\\n1 9\\n12 3\\n8 6\\n8 9\\n7 1\\n7 2\\n14 8\\n4 12\\n20 21\\n21 13\\n11 7\\n15 19\\n12 20\\n17 13\\n13 22\\n15 4\\n19 12\\n18 11\\n20 8\\n12 6\\n20 14\\n7 4\\n22 11\\n11 2\\n9 7\\n22 1\\n10 9\\n10 4\\n12 7\\n17 7\\n11 1\\n8 16\\n20 19\\n20 6\\n11 10\\n4 22\\n7 8\\n4 9\\n17 19\\n5 11\\n13 10\\n6 2\\n13 9\\n6 19\\n19 9\\n7 22\\n15 7\\n15 22\\n2 4\\n3 16\\n13 18\\n10 2\\n7 16\\n2 3\\n\",\n    \"22 44\\n3 22\\n1 9\\n14 21\\n10 17\\n3 19\\n12 20\\n14 17\\n6 4\\n16 1\\n8 22\\n2 5\\n15 2\\n10 14\\n7 14\\n12 4\\n21 16\\n1 6\\n18 8\\n22 19\\n22 7\\n15 5\\n16 9\\n21 1\\n13 2\\n13 15\\n8 3\\n20 15\\n19 10\\n19 7\\n9 12\\n11 8\\n6 12\\n7 10\\n5 11\\n4 13\\n18 11\\n17 16\\n11 3\\n20 13\\n5 18\\n9 6\\n17 21\\n2 18\\n4 20\\n\",\n    \"22 66\\n5 7\\n18 15\\n21 10\\n12 8\\n21 22\\n17 2\\n13 18\\n11 6\\n7 1\\n5 1\\n15 6\\n13 17\\n6 21\\n5 4\\n19 4\\n14 11\\n15 11\\n4 13\\n2 11\\n2 6\\n10 22\\n17 18\\n7 4\\n19 5\\n22 12\\n1 13\\n11 21\\n10 9\\n17 14\\n3 7\\n18 2\\n4 17\\n20 19\\n16 21\\n9 20\\n3 19\\n2 15\\n8 19\\n21 12\\n16 22\\n3 5\\n10 12\\n22 20\\n1 18\\n16 10\\n4 1\\n9 3\\n8 5\\n12 20\\n22 9\\n6 16\\n18 14\\n8 3\\n15 16\\n11 16\\n12 9\\n7 13\\n6 10\\n14 15\\n9 8\\n19 7\\n1 17\\n13 14\\n14 2\\n20 3\\n20 8\\n\",\n    \"22 40\\n2 3\\n11 13\\n7 10\\n6 8\\n2 4\\n14 16\\n7 9\\n13 16\\n10 11\\n1 4\\n19 21\\n18 19\\n6 7\\n5 8\\n14 15\\n9 11\\n11 14\\n8 9\\n3 5\\n3 6\\n18 20\\n10 12\\n9 12\\n17 20\\n17 19\\n1 3\\n16 18\\n4 6\\n4 5\\n12 14\\n19 22\\n13 15\\n5 7\\n20 22\\n15 18\\n12 13\\n8 10\\n15 17\\n16 17\\n20 21\\n\",\n    \"22 57\\n5 7\\n11 15\\n18 19\\n9 12\\n18 20\\n10 15\\n9 11\\n15 16\\n6 8\\n5 9\\n14 17\\n9 10\\n16 20\\n5 8\\n4 9\\n12 15\\n14 16\\n7 11\\n13 17\\n13 18\\n19 22\\n10 13\\n6 7\\n4 7\\n16 21\\n8 10\\n15 18\\n21 22\\n10 14\\n3 6\\n11 14\\n7 12\\n1 6\\n17 19\\n12 13\\n3 4\\n13 16\\n2 5\\n18 21\\n17 21\\n3 5\\n20 22\\n1 5\\n8 12\\n17 20\\n7 10\\n1 4\\n2 6\\n8 11\\n12 14\\n16 19\\n11 13\\n2 4\\n14 18\\n15 17\\n4 8\\n6 9\\n\",\n    \"22 72\\n2 5\\n6 9\\n9 14\\n16 19\\n14 19\\n15 20\\n12 15\\n10 16\\n8 10\\n4 7\\n10 13\\n15 18\\n3 5\\n2 7\\n16 18\\n1 6\\n6 11\\n11 14\\n15 19\\n19 22\\n5 9\\n7 12\\n13 19\\n2 6\\n11 16\\n11 13\\n6 10\\n11 15\\n12 16\\n9 16\\n5 10\\n1 8\\n12 13\\n8 12\\n3 7\\n16 20\\n4 6\\n3 6\\n7 10\\n20 22\\n18 22\\n5 12\\n17 22\\n14 18\\n4 8\\n14 17\\n9 15\\n3 8\\n5 11\\n7 9\\n10 14\\n4 5\\n1 5\\n18 21\\n8 9\\n8 11\\n19 21\\n9 13\\n2 8\\n10 15\\n1 7\\n14 20\\n12 14\\n13 18\\n20 21\\n15 17\\n16 17\\n6 12\\n13 20\\n7 11\\n17 21\\n13 17\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n2 3 \",\n    \"1\\n1 \",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n3 \",\n    \"16\\n1 5 7 8 9 10 11 12 13 14 16 17 18 20 21 22 \",\n    \"15\\n1 3 4 5 10 11 12 13 14 16 17 18 20 21 22 \",\n    \"20\\n1 2 3 4 5 6 7 9 10 11 12 13 14 15 16 17 18 19 20 21 \",\n    \"20\\n1 2 3 4 5 6 7 8 10 11 13 14 15 16 17 18 19 20 21 22 \",\n    \"11\\n1 2 3 4 5 6 7 8 11 13 14 \",\n    \"12\\n1 2 3 4 5 7 8 10 11 13 14 17 \",\n    \"11\\n2 4 5 7 8 15 18 19 20 21 22 \",\n    \"11\\n1 2 5 9 10 12 14 15 17 18 20 \",\n    \"11\\n2 3 7 9 10 11 14 15 18 20 21 \",\n    \"11\\n2 4 6 7 9 12 14 15 17 18 19 \",\n    \"11\\n2 5 6 8 9 10 14 15 18 19 21 \",\n    \"11\\n1 3 4 7 8 9 12 16 17 20 22 \",\n    \"11\\n3 4 7 10 13 14 15 16 18 21 22 \",\n    \"11\\n1 3 8 9 12 13 15 16 17 20 21 \",\n    \"11\\n1 7 8 9 10 12 13 14 17 18 19 \",\n    \"11\\n1 2 6 10 11 13 16 17 19 21 22 \",\n    \"11\\n1 5 6 7 8 12 15 16 17 18 22 \",\n    \"11\\n1 2 3 5 9 11 12 13 15 20 21 \",\n    \"11\\n5 8 11 12 13 14 15 17 18 19 22 \",\n    \"9\\n2 5 7 8 11 13 19 20 21 \",\n    \"7\\n1 2 3 6 9 13 14 \",\n    \"5\\n2 3 8 9 22 \",\n    \"4\\n2 6 7 11 \",\n    \"10\\n1 2 4 6 8 10 13 16 17 18 \",\n    \"6\\n2 3 6 7 9 10 \",\n    \"9\\n3 5 7 9 11 13 15 17 19 \",\n    \"6\\n4 7 10 13 16 19 \",\n    \"4\\n5 9 13 17 \"\n  ]\n}",
        "dataset": "apps",
        "tags": [
            "reasoning/coding"
        ]
    },
    {
        "problem": "Many pharmacies in the United States fill prescriptions strictly on a first-come, first-served basis, even preferring prescriptions submitted electronically from a remote site to prescriptions dropped off by waiting customers in the store. This frequently leads to situations where customers have to wait for prescriptions because pharmacy technicians are busy filling prescriptions that may not be picked up until much later anyway.\n\nThis problem asks you to investigate the effect of an “in-store customers first” policy. Under this policy, technicians fill prescriptions in the order in which they are dropped off, but they will not start filling remote prescriptions as long as there are in-store prescriptions to be filled.\n\nWrite a program that computes the average completion time for in-store and remote customers under this policy!\n\n-----Input-----\nThe input consists of a single test case. The first line contains two integers $n$ ($0 < n \\le 100000$) and $t$ ($0 < T \\le 10$), where $n$ denotes the number of prescriptions and $T$ the number of technicians working at the pharmacy. This is followed by $n$ lines, one line per prescription.\n\nEach line consists of one integer $d$ ($0 < d \\le 10^9$), which is the time (in seconds) when the prescription was dropped off, followed by a single character ‘R’ or ‘S’ for a remote or in-store prescription, followed by a single integer $k$ ($0 < k \\le 500$) describing the number of seconds it takes a technician to fill this prescription. Prescriptions are listed in increasing order of drop-off time, but multiple prescriptions may be dropped off at the same time, in which case preference should be given to any in-store prescriptions, regardless of the order in which they appear in the input. If two prescriptions of the same type are dropped off at the same time, the prescription needing the shorter fill time must be filled first, again regardless of the order in which they appear in the input.\n\nOnce a technician starts working on a prescription, they will finish filling it, even if an in-store prescription is dropped off while they are working. Each prescription requires one pharmacy technician to fill it, and each technician can work on only one prescription at a time. The technicians work until all prescriptions are filled. You should ignore the time it would take for technicians to decide which prescription to fill next, so a technician who finishes a prescription can start working immediately on the next prescription.\n\n-----Output-----\nOutput two numbers $o$ and $r$, denoting the average completion time for in-store and remote prescriptions, respectively. A prescription’s completion time is defined as the time difference between when a prescription was dropped off and when it was filled. If there were no in-store or remote prescriptions in the input, output $0$ for $o$ or $r$ instead. Your answer is considered correct if it is within a relative or absolute error of $10^{-6}$.\n\n-----Examples-----\nSample Input 1:\n5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\nSample Output 1:\n1.500000 2.666667\n\nSample Input 2:\n5 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\nSample Output 2:\n1.500000 3.666667",
        "test_case": "{\n    \"inputs\": [\n        \"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\\n\",\n        \"5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\\n\",\n        \"5 1\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\\n\"\n    ],\n    \"outputs\": [\n        \"1.500000 2.666667\\n\",\n        \"1.500000 3.666667\\n\",\n        \"3.000000 7.000000\\n\"\n    ]\n}",
        "dataset": "apps",
        "tags": [
            "reasoning/coding"
        ]
    },
    {
        "problem": "Young Luka is about to enter a house with the evil witch Marica inside. As soon as he enters the house, she asks him questions about her array of $N$ numbers. Luka fearfully asks for a clarification of the questions. Marica explains to him that each query consists of two integers $L$ and $R$ which represent the positions of a contiguous sub-array in her array.\n\nIt is Luka’s task to answer for each query what the longest contiguous sub-array of that contiguous sub-array (it can be the entire sub-array) having the property of being magical. An array is called magical if all the values are between the values of the first and last number in that array. For example, $[1\\ 3\\ 1\\ 2\\ 4]$ is magical, the same as $[4\\ 1\\ 1\\ 2\\ 1]$, whereas $[3\\ 3\\ 4\\ 1]$ is not magical.\n\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\leq N \\leq 500000$), the number of numbers in the array. The second line contains $N$ integers $a_ i$ ($1 \\leq a_ i \\leq 10^9$). The third line contains the integer $Q$ ($1 \\leq Q \\leq 500000$), the number of queries. Each of the following $Q$ lines contains two integers, $L$ and $R$ ($1 \\leq L \\leq R \\leq N$), representing the sub-array from the query.\n\n-----Output-----\nThe $i$-th line of output must contain a single integer—the answer to the $i$-th query.\n\n-----Examples-----\nSample Input:\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\nSample Output:\n2\n1\n3",
        "test_case": "{\n    \"inputs\": [\n        \"5\\n5 4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n\",\n        \"6\\n6 6 5 1 6 2\\n3\\n4 5\\n4 6\\n1 4\\n\"\n    ],\n    \"outputs\": [\n        \"2\\n1\\n3\\n\",\n        \"2\\n2\\n4\\n\"\n    ]\n}",
        "dataset": "apps",
        "tags": [
            "reasoning/coding"
        ]
    },
    {
        "problem": "A string is called double free if no two adjacent letters are the same.\n\nA string is called $k$-incremental if for all values of $j$ in the range $[1,k]$, there exists exactly one character with $j$ occurrences, and the string’s length is $1+2+3+\\ldots +(k-1)+k$. For example, if $k=3$, then a $3$-incremental string should have one character appear once, another twice, another three times, in any order, for a total string length of $6$.\n\nA string is both $k$-incremental and double free if it meets both these criteria. Now consider examining all such strings of lowercase letters for a given $k$ in alphabetical order. Consider the following examples.\n\n$k=2$: aba, aca, ada, …, aya, aza, bab, bcb, bdb, …, zxz, zyz\n\n$k=3$: ababac, ababad, …, ababay, ababaz, ababca, …, zyzyzx\n\nWhat is the $n^\\mathrm {th}$ string in an alphabetized list of all $k$-incremental, double free strings?\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. There will be exactly one line of input. It will contain two integers, $k$ and $n$ ($1 \\le k \\le 26, 1 \\le n \\le 10^{18}$), which is asking for the $n^\\mathrm {th}$ string in the alphabetically sorted list of all $k$-incremental, double free strings.\n\n-----Output-----\nOutput the $n^\\mathrm {th}$ $k$-incremental, double free string in the alphabetized list. If no such string exists, output $-1$.\n\n-----Examples-----\nSample Input 1:\n2 650\nSample Output 1:\nzyz\n\nSample Input 2:\n2 651\nSample Output 2:\n-1",
        "test_case": "{\n    \"inputs\": [\n        \"2 650\\n\",\n        \"2 651\\n\",\n        \"5 12345678901234\\n\"\n    ],\n    \"outputs\": [\n        \"zyz\\n\",\n        \"-1\\n\",\n        \"yuzczuyuyuzuyci\\n\"\n    ]\n}",
        "dataset": "apps",
        "tags": [
            "reasoning/coding"
        ]
    }
]