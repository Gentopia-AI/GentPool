{
    "problem": "Let us call a pair of integer numbers m-perfect, if at least one number in the pair is greater than or equal to m. Thus, the pairs (3, 3) and (0, 2) are 2-perfect while the pair (-1, 1) is not.\n\nTwo integers x, y are written on the blackboard. It is allowed to erase one of them and replace it with the sum of the numbers, (x + y).\n\nWhat is the minimum number of such operations one has to perform in order to make the given pair of integers m-perfect?\n\n\n-----Input-----\n\nSingle line of the input contains three integers x, y and m ( - 10^18 ≤ x, y, m ≤ 10^18).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preffered to use the cin, cout streams or the %I64d specifier.\n\n\n-----Output-----\n\nPrint the minimum number of operations or \"-1\" (without quotes), if it is impossible to transform the given pair to the m-perfect one.\n\n\n-----Examples-----\nInput\n1 2 5\n\nOutput\n2\n\nInput\n-1 4 15\n\nOutput\n4\n\nInput\n0 -1 5\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample the following sequence of operations is suitable: (1, 2) $\\rightarrow$ (3, 2) $\\rightarrow$ (5, 2).\n\nIn the second sample: (-1, 4) $\\rightarrow$ (3, 4) $\\rightarrow$ (7, 4) $\\rightarrow$ (11, 4) $\\rightarrow$ (15, 4).\n\nFinally, in the third sample x, y cannot be made positive, hence there is no proper sequence of operations.",
    "test_case": "{\n  \"inputs\": [\n    \"1 2 5\\n\",\n    \"-1 4 15\\n\",\n    \"0 -1 5\\n\",\n    \"0 1 8\\n\",\n    \"-134 -345 -134\\n\",\n    \"-134 -345 -133\\n\",\n    \"999999999 -1000000000 1000000000\\n\",\n    \"0 0 0\\n\",\n    \"0 0 1\\n\",\n    \"-1000000000000000000 1 1000000000000000000\\n\",\n    \"-3 26 -1\\n\",\n    \"-25 4 -8\\n\",\n    \"12 30 -8\\n\",\n    \"-12 17 3\\n\",\n    \"4 -11 28\\n\",\n    \"38 174 957147453\\n\",\n    \"154 30 763391461\\n\",\n    \"3 193 648520002\\n\",\n    \"139 82 923851170\\n\",\n    \"171 185 534908267\\n\",\n    \"-868993006 -389009632 -766659629\\n\",\n    \"-429468031 69656014 39767881\\n\",\n    \"185212727 871828769 828159476\\n\",\n    \"140457446 731228634 -75123935\\n\",\n    \"223567628 -731033737 352248633\\n\",\n    \"-187818082 -372699371 -301077133\\n\",\n    \"-552043292 -693546115 415527936\\n\",\n    \"-29007970 -344600631 62206369\\n\",\n    \"101292660 -305927896 648565756\\n\",\n    \"702748103 -278432024 995244274\\n\",\n    \"0 0 -1\\n\",\n    \"0 0 0\\n\",\n    \"0 0 1000000000\\n\",\n    \"0 0 1\\n\",\n    \"1 -999999999 239239239\\n\",\n    \"-1 -1 0\\n\",\n    \"-1 0 0\\n\",\n    \"-1 0 1\\n\",\n    \"-1000000000 -1000000000 -1000000000\\n\",\n    \"-1000000000 -1000000000 1000000000\\n\",\n    \"999999999 999999999 1000000000\\n\",\n    \"-1 1 609276626\\n\",\n    \"-1 2 926098525\\n\",\n    \"0 0 698431198\\n\",\n    \"0 -3 702455284\\n\",\n    \"0 0 648749804\\n\",\n    \"-1 0 861856808\\n\",\n    \"2 2 -213745374\\n\",\n    \"-1 1 21065410\\n\",\n    \"3 -3 607820420\\n\",\n    \"36 -58 428518679\\n\",\n    \"8 55 931239629\\n\",\n    \"-99 -91 523666385\\n\",\n    \"-56 -11 631827324\\n\",\n    \"-4 6 447215792\\n\",\n    \"-47 -31 -669106932\\n\",\n    \"12 -76 -999189104\\n\",\n    \"39 15 -960040787\\n\",\n    \"-96 26 -210129802\\n\",\n    \"93 86 -850132431\\n\",\n    \"1 -1000000000000000000 1000000000000000000\\n\",\n    \"-2348349823443 234234545453 1000000000000000000\\n\",\n    \"0 1 679891637638612258\\n\",\n    \"-1000000000000000000 -1000000000000000000 -1000000000000000000\\n\",\n    \"-1000000000000000000 -1000000000000000000 -999999999999999999\\n\",\n    \"-100000000000000 1 233\\n\",\n    \"-1000000000000 2 1000000000000\\n\",\n    \"-1000000000000 3 1000000000\\n\",\n    \"10 -10 0\\n\",\n    \"-1000000000000000 2 444\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"4\\n\",\n    \"-1\\n\",\n    \"5\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"3\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"1000000000000000087\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"8\\n\",\n    \"33\\n\",\n    \"33\\n\",\n    \"32\\n\",\n    \"33\\n\",\n    \"31\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"5\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"8\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1000000040\\n\",\n    \"-1\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"44\\n\",\n    \"43\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"0\\n\",\n    \"37\\n\",\n    \"42\\n\",\n    \"37\\n\",\n    \"36\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"39\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1000000000000000087\\n\",\n    \"43\\n\",\n    \"86\\n\",\n    \"0\\n\",\n    \"-1\\n\",\n    \"100000000000012\\n\",\n    \"500000000057\\n\",\n    \"333333333375\\n\",\n    \"0\\n\",\n    \"500000000000012\\n\"\n  ]\n}",
    "dataset": "apps",
    "tags": [
        "reasoning/coding"
    ]
}