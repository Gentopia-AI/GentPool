{
    "problem": "Alex doesn't like boredom. That's why whenever he gets bored, he comes up with games. One long winter evening he came up with a game and decided to play it.\n\nGiven a sequence a consisting of n integers. The player can make several steps. In a single step he can choose an element of the sequence (let's denote it a_{k}) and delete it, at that all elements equal to a_{k} + 1 and a_{k} - 1 also must be deleted from the sequence. That step brings a_{k} points to the player. \n\nAlex is a perfectionist, so he decided to get as many points as possible. Help him.\n\n\n-----Input-----\n\nThe first line contains integer n (1 ≤ n ≤ 10^5) that shows how many numbers are in Alex's sequence. \n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^5).\n\n\n-----Output-----\n\nPrint a single integer — the maximum number of points that Alex can earn.\n\n\n-----Examples-----\nInput\n2\n1 2\n\nOutput\n2\n\nInput\n3\n1 2 3\n\nOutput\n4\n\nInput\n9\n1 2 1 3 2 2 2 2 3\n\nOutput\n10\n\n\n\n-----Note-----\n\nConsider the third test example. At first step we need to choose any element equal to 2. After that step our sequence looks like this [2, 2, 2, 2]. Then we do 4 steps, on each step we choose any element equals to 2. In total we earn 10 points.",
    "test_case": "{\n  \"inputs\": [\n    \"2\\n1 2\\n\",\n    \"3\\n1 2 3\\n\",\n    \"9\\n1 2 1 3 2 2 2 2 3\\n\",\n    \"5\\n3 3 4 5 4\\n\",\n    \"5\\n5 3 5 3 4\\n\",\n    \"5\\n4 2 3 2 5\\n\",\n    \"10\\n10 5 8 9 5 6 8 7 2 8\\n\",\n    \"10\\n1 1 1 1 1 1 2 3 4 4\\n\",\n    \"100\\n6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 4 5 8 9 6 5 6 4 10 9 1 4 1 7 1 4 9 10 8 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 8 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4\\n\",\n    \"100\\n6 1 5 7 10 10 2 7 3 7 2 10 7 6 3 5 5 5 3 7 2 4 2 7 7 4 2 8 2 10 4 7 9 1 1 7 9 7 1 10 10 9 5 6 10 1 7 5 8 1 1 5 3 10 2 4 3 5 2 7 4 9 5 10 1 3 7 6 6 9 3 6 6 10 1 10 6 1 10 3 4 1 7 9 2 7 8 9 3 3 2 4 6 6 1 2 9 4 1 2\\n\",\n    \"100\\n7 6 3 8 8 3 10 5 3 8 6 4 6 9 6 7 3 9 10 7 5 5 9 10 7 2 3 8 9 5 4 7 9 3 6 4 9 10 7 6 8 7 6 6 10 3 7 4 5 7 7 5 1 5 4 8 7 3 3 4 7 8 5 9 2 2 3 1 6 4 6 6 6 1 7 10 7 4 5 3 9 2 4 1 5 10 9 3 9 6 8 5 2 1 10 4 8 5 10 9\\n\",\n    \"100\\n2 10 9 1 2 6 7 2 2 8 9 9 9 5 6 2 5 1 1 10 7 4 5 5 8 1 9 4 10 1 9 3 1 8 4 10 8 8 2 4 6 5 1 4 2 2 1 2 8 5 3 9 4 10 10 7 8 6 1 8 2 6 7 1 6 7 3 10 10 3 7 7 6 9 6 8 8 10 4 6 4 3 3 3 2 3 10 6 8 5 5 10 3 7 3 1 1 1 5 5\\n\",\n    \"100\\n4 9 7 10 4 7 2 6 1 9 1 8 7 5 5 7 6 7 9 8 10 5 3 5 7 10 3 2 1 3 8 9 4 10 4 7 6 4 9 6 7 1 9 4 3 5 8 9 2 7 10 5 7 5 3 8 10 3 8 9 3 4 3 10 6 5 1 8 3 2 5 8 4 7 5 3 3 2 6 9 9 8 2 7 6 3 2 2 8 8 4 5 6 9 2 3 2 2 5 2\\n\",\n    \"100\\n4 8 10 1 8 8 8 1 10 3 1 8 6 8 6 1 10 3 3 3 3 7 2 1 1 6 10 1 7 9 8 10 3 8 6 2 1 6 5 6 10 8 9 7 4 3 10 5 3 9 10 5 10 8 8 5 7 8 9 5 3 9 9 2 7 8 1 10 4 9 2 8 10 10 5 8 5 1 7 3 4 5 2 5 9 3 2 5 6 2 3 10 1 5 9 6 10 4 10 8\\n\",\n    \"100\\n4 8 10 1 8 8 8 1 10 3 1 8 6 8 6 1 10 3 3 3 3 7 2 1 1 6 10 1 7 9 8 10 3 8 6 2 1 6 5 6 10 8 9 7 4 3 10 5 3 9 10 5 10 8 8 5 7 8 9 5 3 9 9 2 7 8 1 10 4 9 2 8 10 10 5 8 5 1 7 3 4 5 2 5 9 3 2 5 6 2 3 10 1 5 9 6 10 4 10 8\\n\",\n    \"100\\n10 5 8 4 4 4 1 4 5 8 3 10 2 4 1 10 8 1 1 6 8 4 2 9 1 3 1 7 7 9 3 5 5 8 6 9 9 4 8 1 3 3 2 6 1 5 4 5 3 5 5 6 7 5 7 9 3 5 4 9 2 6 8 1 1 7 7 3 8 9 8 7 3 2 4 1 6 1 3 9 4 2 2 8 5 10 1 8 8 5 1 5 6 9 4 5 6 5 10 2\\n\",\n    \"100\\n7 5 1 8 5 6 6 2 6 2 7 7 3 6 2 4 4 2 10 2 2 2 10 6 6 1 5 10 9 1 5 9 8 9 4 1 10 5 7 5 7 6 4 8 8 1 7 8 3 8 2 1 8 4 10 3 5 6 6 10 9 6 5 1 10 7 6 9 9 2 10 10 9 1 2 1 7 7 4 10 1 10 5 5 3 8 9 8 1 4 10 2 4 5 4 4 1 6 2 9\\n\",\n    \"100\\n5 6 10 7 1 7 10 1 9 1 5 1 4 1 3 3 7 9 1 6 1 6 5 7 1 6 3 1 3 6 3 8 2 4 1 5 2 10 7 3 10 4 10 1 5 4 2 9 7 9 5 7 10 4 1 4 8 9 3 1 3 7 7 4 3 7 7 10 6 9 5 5 6 5 3 9 8 8 5 5 4 10 9 4 10 4 1 8 3 5 4 10 9 3 10 4 10 7 10 9\\n\",\n    \"10\\n7 4 5 3 9 1 10 3 4 5\\n\",\n    \"10\\n8 9 6 5 6 4 10 9 1 4\\n\",\n    \"10\\n1 7 1 4 9 10 8 2 9 9\\n\",\n    \"1\\n100000\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"4\\n\",\n    \"10\\n\",\n    \"11\\n\",\n    \"16\\n\",\n    \"9\\n\",\n    \"46\\n\",\n    \"14\\n\",\n    \"296\\n\",\n    \"313\\n\",\n    \"298\\n\",\n    \"312\\n\",\n    \"287\\n\",\n    \"380\\n\",\n    \"380\\n\",\n    \"265\\n\",\n    \"328\\n\",\n    \"324\\n\",\n    \"34\\n\",\n    \"39\\n\",\n    \"40\\n\",\n    \"100000\\n\"\n  ]\n}",
    "dataset": "apps",
    "tags": [
        "reasoning/coding"
    ]
}