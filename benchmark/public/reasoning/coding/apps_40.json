{
    "problem": "Emuskald is a well-known illusionist. One of his trademark tricks involves a set of magical boxes. The essence of the trick is in packing the boxes inside other boxes.\n\nFrom the top view each magical box looks like a square with side length equal to 2^{k} (k is an integer, k ≥ 0) units. A magical box v can be put inside a magical box u, if side length of v is strictly less than the side length of u. In particular, Emuskald can put 4 boxes of side length 2^{k} - 1 into one box of side length 2^{k}, or as in the following figure:\n\n [Image] \n\nEmuskald is about to go on tour performing around the world, and needs to pack his magical boxes for the trip. He has decided that the best way to pack them would be inside another magical box, but magical boxes are quite expensive to make. Help him find the smallest magical box that can fit all his boxes.\n\n\n-----Input-----\n\nThe first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of different sizes of boxes Emuskald has. Each of following n lines contains two integers k_{i} and a_{i} (0 ≤ k_{i} ≤ 10^9, 1 ≤ a_{i} ≤ 10^9), which means that Emuskald has a_{i} boxes with side length 2^{k}_{i}. It is guaranteed that all of k_{i} are distinct.\n\n\n-----Output-----\n\nOutput a single integer p, such that the smallest magical box that can contain all of Emuskald’s boxes has side length 2^{p}.\n\n\n-----Examples-----\nInput\n2\n0 3\n1 5\n\nOutput\n3\n\nInput\n1\n0 4\n\nOutput\n1\n\nInput\n2\n1 10\n2 2\n\nOutput\n3\n\n\n\n-----Note-----\n\nPicture explanation. If we have 3 boxes with side length 2 and 5 boxes with side length 1, then we can put all these boxes inside a box with side length 4, for example, as shown in the picture.\n\nIn the second test case, we can put all four small boxes into a box with side length 2.",
    "test_case": "{\n  \"inputs\": [\n    \"2\\n0 3\\n1 5\\n\",\n    \"1\\n0 4\\n\",\n    \"2\\n1 10\\n2 2\\n\",\n    \"1\\n0 1\\n\",\n    \"1\\n1000000000 1000000000\\n\",\n    \"1\\n0 16\\n\",\n    \"1\\n0 17\\n\",\n    \"2\\n0 16\\n1 4\\n\",\n    \"3\\n0 20\\n1 18\\n2 4\\n\",\n    \"3\\n0 64\\n1 16\\n2 4\\n\",\n    \"5\\n1 1000000\\n100 100\\n101 9\\n102 4\\n103 8\\n\",\n    \"10\\n11 69\\n7 56\\n8 48\\n2 56\\n12 6\\n9 84\\n1 81\\n4 80\\n3 9\\n5 18\\n\",\n    \"15\\n0 268435456\\n1 67108864\\n2 16777216\\n3 4194304\\n4 1048576\\n5 262144\\n6 65536\\n7 16384\\n8 4096\\n9 1024\\n10 256\\n11 64\\n12 16\\n13 4\\n14 1\\n\",\n    \"14\\n0 268435456\\n1 67108864\\n2 16777216\\n3 4194304\\n4 1048576\\n5 262144\\n6 65536\\n7 16384\\n8 4096\\n9 1024\\n10 256\\n11 64\\n12 16\\n13 4\\n\",\n    \"14\\n0 268435456\\n1 67108864\\n2 16777216\\n3 4194305\\n4 1048576\\n5 262144\\n6 65536\\n7 16384\\n8 4096\\n9 1024\\n10 256\\n11 64\\n12 16\\n13 4\\n\",\n    \"14\\n0 268435457\\n1 67108865\\n2 16777217\\n3 4194305\\n4 1048577\\n5 262145\\n6 65537\\n7 16383\\n8 4097\\n9 1025\\n10 257\\n11 65\\n12 17\\n13 4\\n\",\n    \"16\\n1296 2\\n1568 1\\n7435 2\\n3660 1\\n6863 2\\n886 2\\n2596 1\\n7239 1\\n6146 1\\n5634 1\\n3119 2\\n1166 2\\n7610 2\\n5992 1\\n630 2\\n8491 2\\n\",\n    \"17\\n8028 11\\n4011 32\\n8609 52\\n1440 25\\n6752 42\\n536 47\\n761 15\\n2749 60\\n5363 62\\n7170 23\\n9734 10\\n8487 28\\n6147 20\\n5257 54\\n821 49\\n7219 19\\n6150 43\\n\",\n    \"15\\n999999986 268435456\\n999999987 67108864\\n999999988 16777216\\n999999989 4194304\\n999999990 1048576\\n999999991 262144\\n999999992 65536\\n999999993 16384\\n999999994 4096\\n999999995 1024\\n999999996 256\\n999999997 64\\n999999998 16\\n999999999 4\\n1000000000 1\\n\",\n    \"3\\n1 4\\n0 17\\n2 4\\n\",\n    \"2\\n0 13\\n1 1\\n\",\n    \"2\\n0 2\\n1 4\\n\",\n    \"2\\n100 52\\n101 4\\n\",\n    \"10\\n1 1\\n10 1\\n100 1\\n1000 1\\n10000 1\\n100000 1\\n1000000 1\\n10000000 1\\n100000000 1\\n1000000000 1\\n\",\n    \"1\\n0 268435456\\n\",\n    \"1\\n0 268435457\\n\",\n    \"1\\n1 1000000000\\n\",\n    \"9\\n0 268435456\\n2 16777216\\n3 4194304\\n6 65536\\n7 16384\\n8 4096\\n11 64\\n12 16\\n14 1\\n\",\n    \"8\\n0 268435456\\n2 16777216\\n3 4194304\\n6 65536\\n7 16384\\n8 4096\\n11 64\\n12 16\\n\",\n    \"8\\n0 268435456\\n2 16777216\\n3 4195304\\n6 65536\\n7 16384\\n8 4096\\n11 64\\n12 16\\n\",\n    \"7\\n1 16777216\\n2 1000000000\\n5 65537\\n6 16384\\n7 4096\\n10 64\\n11 16\\n\",\n    \"10\\n0 689790649\\n10 494030130\\n6 210447956\\n3 993638872\\n7 116080273\\n8 802686533\\n2 677383122\\n9 936407280\\n4 593615642\\n1 853659941\\n\",\n    \"2\\n0 16777216\\n16 1\\n\",\n    \"1\\n1 1\\n\",\n    \"2\\n21 134217728\\n1 1024\\n\",\n    \"2\\n10 3\\n25 747\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1000000015\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"105\\n\",\n    \"15\\n\",\n    \"15\\n\",\n    \"14\\n\",\n    \"15\\n\",\n    \"15\\n\",\n    \"8492\\n\",\n    \"9736\\n\",\n    \"1000000001\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"103\\n\",\n    \"1000000001\\n\",\n    \"14\\n\",\n    \"15\\n\",\n    \"16\\n\",\n    \"15\\n\",\n    \"14\\n\",\n    \"15\\n\",\n    \"17\\n\",\n    \"25\\n\",\n    \"17\\n\",\n    \"2\\n\",\n    \"35\\n\",\n    \"30\\n\"\n  ]\n}",
    "dataset": "apps",
    "tags": [
        "reasoning/coding"
    ]
}