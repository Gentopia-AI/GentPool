{
    "problem": "The only difference between easy and hard versions is constraints.\n\nNauuo is a girl who loves random picture websites.\n\nOne day she made a random picture website by herself which includes $n$ pictures.\n\nWhen Nauuo visits the website, she sees exactly one picture. The website does not display each picture with equal probability. The $i$-th picture has a non-negative weight $w_i$, and the probability of the $i$-th picture being displayed is $\\frac{w_i}{\\sum_{j=1}^nw_j}$. That is to say, the probability of a picture to be displayed is proportional to its weight.\n\nHowever, Nauuo discovered that some pictures she does not like were displayed too often. \n\nTo solve this problem, she came up with a great idea: when she saw a picture she likes, she would add $1$ to its weight; otherwise, she would subtract $1$ from its weight.\n\nNauuo will visit the website $m$ times. She wants to know the expected weight of each picture after all the $m$ visits modulo $998244353$. Can you help her?\n\nThe expected weight of the $i$-th picture can be denoted by $\\frac {q_i} {p_i}$ where $\\gcd(p_i,q_i)=1$, you need to print an integer $r_i$ satisfying $0\\le r_i<998244353$ and $r_i\\cdot p_i\\equiv q_i\\pmod{998244353}$. It can be proved that such $r_i$ exists and is unique.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1\\le n\\le 2\\cdot 10^5$, $1\\le m\\le 3000$) — the number of pictures and the number of visits to the website.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($a_i$ is either $0$ or $1$) — if $a_i=0$ , Nauuo does not like the $i$-th picture; otherwise Nauuo likes the $i$-th picture. It is guaranteed that there is at least one picture which Nauuo likes.\n\nThe third line contains $n$ positive integers $w_1,w_2,\\ldots,w_n$ ($w_i \\geq 1$) — the initial weights of the pictures. It is guaranteed that the sum of all the initial weights does not exceed $998244352-m$.\n\n\n-----Output-----\n\nThe output contains $n$ integers $r_1,r_2,\\ldots,r_n$ — the expected weights modulo $998244353$.\n\n\n-----Examples-----\nInput\n2 1\n0 1\n2 1\n\nOutput\n332748119\n332748119\n\nInput\n1 2\n1\n1\n\nOutput\n3\n\nInput\n3 3\n0 1 1\n4 3 5\n\nOutput\n160955686\n185138929\n974061117\n\n\n\n-----Note-----\n\nIn the first example, if the only visit shows the first picture with a probability of $\\frac 2 3$, the final weights are $(1,1)$; if the only visit shows the second picture with a probability of $\\frac1 3$, the final weights are $(2,2)$.\n\nSo, both expected weights are $\\frac2 3\\cdot 1+\\frac 1 3\\cdot 2=\\frac4 3$ .\n\nBecause $332748119\\cdot 3\\equiv 4\\pmod{998244353}$, you need to print $332748119$ instead of $\\frac4 3$ or $1.3333333333$.\n\nIn the second example, there is only one picture which Nauuo likes, so every time Nauuo visits the website, $w_1$ will be increased by $1$.\n\nSo, the expected weight is $1+2=3$.\n\nNauuo is very naughty so she didn't give you any hint of the third example.",
    "test_case": "{\"inputs\": [\"2 1\\n0 1\\n2 1\\n\", \"1 2\\n1\\n1\\n\", \"3 3\\n0 1 1\\n4 3 5\\n\", \"5 5\\n0 1 0 0 1\\n2 4 1 2 1\\n\", \"20 20\\n0 1 0 1 1 1 0 0 0 1 1 1 1 0 1 1 1 1 1 0\\n109 1 24 122 136 42 25 112 110 15 26 48 35 10 86 13 41 6 24 15\\n\", \"20 30\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 3 2 1 3 2 1 1 2 1 1 2 2 4 2 1 5 2 3\\n\", \"20 30\\n1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 2 1 3 1 4 1 5 1 1 2 3 1 1 3 3 2 2 1 2\\n\", \"20 30\\n0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\\n3 4 1 2 1 1 1 2 5 2 1 2 3 1 1 2 3 2 1 2\\n\", \"20 30\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0\\n1 1 3 2 3 1 2 2 3 2 2 2 2 2 2 3 3 1 1 2\\n\", \"20 30\\n0 0 1 1 1 0 0 1 0 0 1 0 0 1 1 1 1 0 0 1\\n1 2 2 2 2 2 1 1 2 1 4 1 2 5 3 4 1 1 2 1\\n\", \"20 30\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n765 451 7275 385 1686 78 554 114 1980 394 776 232 627 760 782 7 486 32 1100 1516\\n\", \"20 30\\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1\\n779 1317 1275 234 857 1531 785 265 679 767 1994 11 918 1146 1807 71 813 245 3926 580\\n\", \"20 30\\n0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n128 574 205 490 611 1294 283 1690 1466 1896 272 19 1020 5032 357 1500 36 1749 1202 176\\n\", \"20 30\\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\\n61 849 320 1007 624 441 1332 3939 1176 718 419 634 657 914 858 882 1019 1567 62 2521\\n\", \"20 30\\n0 1 0 1 1 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0\\n244 1901 938 1350 1010 763 318 2158 1645 534 1356 563 295 1449 2306 224 1302 195 639 810\\n\", \"20 30\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n126679203 179924771 16639504 67055540 14134870 36407782 15024189 39367944 121531542 5400023 5834434 8539193 3686913 11287136 36370086 71808281 138206490 59846864 19052959 21446598\\n\", \"20 30\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1\\n144831196 28660251 62050800 52660762 23189000 12771861 73096012 25119113 119648684 16011144 51600638 74708999 6312006 26945863 68746869 58112898 5070 19157938 74351320 60263898\\n\", \"20 30\\n0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\\n34095514 37349809 60555988 40280455 19504485 77297461 41415742 66290058 20631093 185280391 7151718 64927972 15611855 4317891 24600598 24588269 60808977 9108470 13217752 191209824\\n\", \"20 30\\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0\\n9380933 34450681 12329733 7732927 73910078 16165679 149467043 56914401 21809098 36934833 71019254 168559440 12033996 40465391 7156881 3312348 37150678 130625432 42709585 66115911\\n\", \"20 30\\n0 0 1 0 1 0 1 1 1 0 1 1 0 0 1 0 0 1 0 1\\n66166717 200301718 6725634 95379617 42880832 48874211 64912554 36809296 13248978 58406666 53142218 45080678 19902257 58554006 23570140 14484661 7589423 78746789 11072716 52395211\\n\", \"20 30\\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661\\n\", \"20 30\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803\\n\", \"10 3000\\n1 1 1 1 1 0 0 0 1 1\\n6 22 5 2 4 15 4 7 31 4\\n\"], \"outputs\": [\"332748119\\n332748119\\n\", \"3\\n\", \"160955686\\n185138929\\n974061117\\n\", \"665717847\\n333191345\\n831981100\\n665717847\\n831981101\\n\", \"217595927\\n149660176\\n322657182\\n290143118\\n388896876\\n296261274\\n86540143\\n507489163\\n979723241\\n248413934\\n896431517\\n195977977\\n246884395\\n633562669\\n891842900\\n947337935\\n146601098\\n897961056\\n597111165\\n451221827\\n\", \"249561090\\n249561090\\n748683270\\n499122180\\n249561090\\n748683270\\n499122180\\n249561090\\n249561090\\n499122180\\n249561090\\n249561090\\n499122180\\n499122180\\n7\\n499122180\\n249561090\\n249561097\\n499122180\\n748683270\\n\", \"902255482\\n806266611\\n902255482\\n710277740\\n902255482\\n537377994\\n902255482\\n518299998\\n902255482\\n902255482\\n806266611\\n710277740\\n902255482\\n902255482\\n710277740\\n710277740\\n806266611\\n806266611\\n902255482\\n806266611\\n\", \"441078046\\n920852179\\n479774133\\n959548266\\n479774133\\n479774133\\n479774133\\n959548266\\n402381959\\n263018694\\n479774133\\n959548266\\n441078046\\n479774133\\n479774133\\n959548266\\n441078046\\n959548266\\n479774133\\n959548266\\n\", \"550803098\\n550803098\\n654164941\\n103361843\\n654164941\\n550803098\\n103361843\\n103361843\\n654164941\\n103361843\\n103361843\\n103361843\\n103361843\\n103361843\\n276551708\\n654164941\\n654164941\\n138275854\\n550803098\\n103361843\\n\", \"297511613\\n595023226\\n756311680\\n756311680\\n756311680\\n595023226\\n297511613\\n378155840\\n595023226\\n297511613\\n514379007\\n297511613\\n595023226\\n892534847\\n136223167\\n514379007\\n378155840\\n297511613\\n595023226\\n378155840\\n\", \"491636110\\n498623506\\n486651408\\n182179980\\n6989399\\n10980766\\n871467875\\n92836839\\n509106603\\n951327263\\n211628580\\n83852758\\n11480438\\n618912260\\n58897200\\n820057743\\n605934809\\n183676993\\n948333237\\n341401087\\n\", \"552990868\\n90431251\\n712871250\\n952916426\\n537881559\\n151361542\\n321464532\\n89445141\\n86037605\\n17799187\\n586392419\\n241031286\\n40642277\\n699465709\\n481837969\\n920500985\\n572000768\\n195703359\\n903238702\\n911489090\\n\", \"389864218\\n157345415\\n537589523\\n962131647\\n753565149\\n104281847\\n378440811\\n873692367\\n690552162\\n658861420\\n578900375\\n198248582\\n923070965\\n228091231\\n572635926\\n887695253\\n795942304\\n70748620\\n510359933\\n785624388\\n\", \"514012356\\n393871659\\n166092575\\n569465276\\n74319433\\n306884170\\n254628439\\n656312237\\n485609669\\n216694535\\n825782618\\n110704962\\n294216114\\n131255421\\n733108087\\n613768340\\n14181299\\n610566194\\n624888021\\n887363731\\n\", \"300071414\\n595185476\\n40756239\\n113904636\\n440148868\\n947268885\\n456535325\\n542868956\\n183161324\\n427608407\\n61171180\\n375813928\\n43680359\\n55509680\\n30410255\\n360521133\\n535772284\\n722568686\\n663107799\\n390646234\\n\", \"615913610\\n488825486\\n773371096\\n742795989\\n193664548\\n323188752\\n32686082\\n709701410\\n293733249\\n161181348\\n193396792\\n354491196\\n708550409\\n644392716\\n323187536\\n646345011\\n487479735\\n1930544\\n322628919\\n966734748\\n\", \"132556548\\n711988928\\n6999755\\n208709864\\n320161276\\n865416376\\n320896979\\n458941660\\n671806481\\n158009043\\n351362956\\n78248147\\n927871852\\n882014191\\n988190329\\n830735503\\n1958329\\n787106839\\n942059547\\n341315444\\n\", \"313283482\\n21804622\\n682197550\\n361027027\\n756362680\\n151917509\\n716108102\\n131732975\\n237068086\\n731869119\\n190595295\\n847684643\\n847454143\\n501579235\\n129856516\\n246699402\\n205385635\\n639100445\\n614421017\\n227076269\\n\", \"813231583\\n458087744\\n445793615\\n651101155\\n484645642\\n506668954\\n896602699\\n556862659\\n145127201\\n302005399\\n558418033\\n213871822\\n57299634\\n564466143\\n767349204\\n290138481\\n12657688\\n925337836\\n827843024\\n119362169\\n\", \"823107880\\n742699237\\n987770596\\n549924308\\n730188349\\n913535291\\n936423447\\n122869154\\n581668441\\n749452306\\n615454312\\n176148736\\n874336841\\n897418997\\n235568492\\n24727530\\n143875067\\n15270097\\n200154604\\n356406452\\n\", \"76898501\\n989279651\\n76898501\\n76898501\\n76898501\\n76898501\\n76898501\\n76898501\\n76898501\\n76898501\\n76898501\\n76898501\\n76898501\\n76898501\\n76898501\\n76898501\\n76898501\\n76898501\\n76898501\\n76898501\\n\", \"504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n504888981\\n\", \"561258918\\n61460660\\n467715765\\n187086306\\n374172612\\n538110090\\n143496024\\n251118042\\n903349037\\n374172612\\n\"]}",
    "dataset": "apps",
    "tags": [
        "reasoning/coding"
    ]
}